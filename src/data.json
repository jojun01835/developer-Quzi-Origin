[
  {
    "question": "HTML은 무엇의 약자인가요?",
    "options": ["하이퍼 텍스트 마크업 언어", "하이퍼링크 및 텍스트 마크업 언어", "홈 툴 마크업 언어", "하이퍼 툴 마크업 언어"],
    "correctAnswer": "하이퍼 텍스트 마크업 언어",
    "hint": "웹 페이지를 만드는 데 사용되는 언어입니다."
  },
  {
    "question": "JavaScript에서 주석을 올바르게 작성하는 방법은 무엇인가요?",
    "options": ["/* 이것은 주석입니다. */", "// 이것은 주석입니다. //", "<!-- 이것은 주석입니다. -->", "# 이것은 주석입니다. #"],
    "correctAnswer": "/* 이것은 주석입니다. */",
    "hint": "'/*'로 시작하고 '*/'로 끝납니다."
  },
  {
    "question": "다음 코드의 출력은 무엇인가요? \n\n const x = 10; \n console.log(x + '5');",
    "options": ["105", "15", "1050", "에러"],
    "correctAnswer": "105",
    "hint": "JavaScript는 '+' 연산자를 사용하여 문자열과 숫자를 함께 사용할 때 자동으로 숫자를 문자열로 변환합니다."
  },
  {
    "question": "JavaScript에서 다음 중 유효한 데이터 타입이 아닌 것은 무엇인가요?",
    "options": ["String", "Number", "Boolean", "Float"],
    "correctAnswer": "Float",
    "hint": "JavaScript는 정수와 실수를 모두 'Number' 데이터 타입으로 사용합니다."
  },
  {
    "question": "CSS는 무엇의 약자인가요?",
    "options": ["계단식 스타일 시트", "창의적 스타일 시트", "컴퓨터 스타일 시트", "다채로운 스타일 시트"],
    "correctAnswer": "계단식 스타일 시트",
    "hint": "웹 페이지의 레이아웃과 모양을 스타일링하는 데 사용됩니다."
  },
  {
    "question": "React에서 HTML 요소에 클래스를 추가하는 데 사용되는 것은 무엇인가요?",
    "options": ["className", "class", "cls", "classList"],
    "correctAnswer": "className",
    "hint": "React에서 클래스를 추가할 때 'class' 대신 'className'을 사용합니다."
  },
  {
    "question": "Node.js에서 모듈을 가져오는 올바른 방법은 무엇인가요?",
    "options": ["require('./module')", "import './module'", "import { module } from 'module'", "import * as module from 'module'"],
    "correctAnswer": "require('./module')",
    "hint": "Node.js에서 모듈을 가져올 때 'require'를 사용합니다."
  },
  {
    "question": "다음 중 배열의 각 요소에 대해 제공된 함수를 호출하여 새로운 배열을 반환하는 배열 메서드는 무엇인가요?",
    "options": ["map()", "filter()", "reduce()", "forEach()"],
    "correctAnswer": "map()",
    "hint": "배열의 요소를 변형하고 새로운 배열을 반환하는 데 사용됩니다."
  },
  {
    "question": "API는 무엇의 약자인가요?",
    "options": ["응용 프로그래밍 인터페이스", "고급 프로그래밍 인터페이스", "응용 프로그램 인터페이스", "고급 애플리케이션 인터페이스"],
    "correctAnswer": "응용 프로그래밍 인터페이스",
    "hint": "서로 다른 소프트웨어 응용 프로그램이 서로 통신할 수 있도록 하는 규칙과 프로토콜의 집합입니다."
  },
  {
    "question": "다음 중 버전 관리 시스템이 아닌 것은 무엇인가요?",
    "options": ["Git", "SVN", "Mercurial", "MySQL"],
    "correctAnswer": "MySQL",
    "hint": "버전 관리 시스템은 코드와 파일의 변경 사항을 관리하는 데 사용되며, MySQL은 관계형 데이터베이스 관리 시스템입니다."
  },
  {
    "question": "React에서 JSX는 무엇의 약자인가요?",
    "options": ["JavaScript XML", "Java 스타일드 XML", "JavaScript 확장", "Java 구문 XML"],
    "correctAnswer": "JavaScript XML",
    "hint": "React에서 UI 컴포넌트의 구조를 설명하는 데 사용되는 JavaScript의 문법 확장입니다."
  },
  {
    "question": "JavaScript에서 블록 스코프 변수를 선언하는 데 사용되는 키워드는 무엇인가요?",
    "options": ["var", "let", "const", "block"],
    "correctAnswer": "let",
    "hint": "ES6에서 도입된 블록 스코프 변수를 선언하는 데 사용됩니다."
  },
  {
    "question": "CSS의 specificity는 무엇을 의미하나요?",
    "options": ["CSS 규칙을 파일에서 작성한 순서", "속성을 기준으로 요소를 선택하는 능력", "CSS 규칙의 가중치", "부모 요소를 기준으로 요소를 선택하는 능력"],
    "correctAnswer": "CSS 규칙의 가중치",
    "hint": "동일한 요소에 대해 충돌하는 CSS 규칙이 있는 경우 어떤 규칙을 적용해야 할지 결정하는 데 사용됩니다."
  },
  {
    "question": "사용자 인터페이스를 구축하기 위한 프론트엔드 JavaScript 프레임워크로서 널리 사용되는 것은 무엇인가요?",
    "options": ["React", "Node.js", "Express.js", "MongoDB"],
    "correctAnswer": "React",
    "hint": "Facebook에서 개발된 것으로, 싱글 페이지 애플리케이션과 상호작용하는 UI 컴포넌트를 구축하는 데 널리 사용됩니다."
  },
  {
    "question": "React에서 'useEffect' 훅의 목적은 무엇인가요?",
    "options": ["양식 제출 처리", "재사용 가능한 컴포넌트 생성", "함수형 컴포넌트에서 상태 관리", "함수형 컴포넌트에서 사이드 이펙트 수행"],
    "correctAnswer": "함수형 컴포넌트에서 사이드 이펙트 수행",
    "hint": "함수형 컴포넌트에서 사이드 이펙트(데이터 가져오기 또는 이벤트 구독 등)를 수행하는 데 사용됩니다."
  },
  {
    "question": "React 애플리케이션에 대해 널리 사용되는 테스팅 라이브러리는 무엇인가요?",
    "options": ["Mocha", "Jasmine", "Cypress", "Jest"],
    "correctAnswer": "Jest",
    "hint": "React 테스팅을 위한 내장 지원을 제공하는 강력한 테스팅 프레임워크입니다."
  },
  {
    "question": "JavaScript의 'localStorage'의 목적은 무엇인가요?",
    "options": ["데이터를 서버에 저장", "데이터를 브라우저에 저장", "쿠키 관리", "양식 유효성 검사 처리"],
    "correctAnswer": "데이터를 브라우저에 저장",
    "hint": "사용자의 웹 브라우저 내부에 데이터를 로컬로 저장하는 데 사용됩니다."
  },
  {
    "question": "CSS 속성 중 요소의 테두리와 내부 콘텐츠 간의 여백을 만드는 데 사용되는 것은 무엇인가요?",
    "options": ["padding", "margin", "border", "spacing"],
    "correctAnswer": "padding",
    "hint": "요소의 테두리 내부에 여백을 생성하는 데 사용됩니다."
  },
  {
    "question": "AJAX는 무엇의 약자인가요?",
    "options": ["비동기 JavaScript와 XML", "고급 JavaScript와 XML", "비동기 Java와 XML", "고급 Java와 XML"],
    "correctAnswer": "비동기 JavaScript와 XML",
    "hint": "전체 페이지를 다시로드하지 않고 웹 페이지의 일부를 업데이트하는 데 사용되는 기술입니다."
  },
  {
    "question": "다음 중 관계형 데이터베이스 관리 시스템(RDBMS)은 무엇인가요?",
    "options": ["MongoDB", "MySQL", "Redis", "Elasticsearch"],
    "correctAnswer": "MySQL",
    "hint": "관계형 데이터베이스를 관리하는 데 널리 사용되는 인기 있는 오픈 소스 RDBMS입니다."
  },
  {
    "question": "JavaScript의 'async' 키워드의 목적은 무엇인가요?",
    "options": ["비동기 함수 정의", "새로운 스레드 생성", "try-catch 블록에서 오류 처리", "strict 모드 비활성화"],
    "correctAnswer": "비동기 함수 정의",
    "hint": "함수를 비동기 함수로 지정하는 데 사용되며, 함수 내에서 'await'를 사용할 수 있게 합니다."
  },
  {
    "question": "React 애플리케이션을 프로덕션 서버에 배포하는 데 사용되는 것은 무엇인가요?",
    "options": ["Webpack", "Babel", "npm", "Node.js"],
    "correctAnswer": "npm",
    "hint": "패키지 설치 및 의존성 관리, 스크립트 실행 등을 위해 사용되는 Node Package Manager입니다."
  },
  {
    "question": "다음 중 'git clone' 명령어의 목적은 무엇인가요?",
    "options": ["새로운 Git 저장소 생성", "파일을 스테이징 영역에 추가", "로컬 변경 사항을 원격 저장소에 푸시", "원격 저장소를 로컬 컴퓨터에 복제"],
    "correctAnswer": "원격 저장소를 로컬 컴퓨터에 복제",
    "hint": "원격 Git 저장소의 로컬 복사본을 만드는 데 사용됩니다."
  },
  {
    "question": "사전 디자인된 UI 컴포넌트를 제공하는 인기있는 CSS 프레임워크는 무엇인가요?",
    "options": ["Bootstrap", "jQuery", "Angular", "Sass"],
    "correctAnswer": "Bootstrap",
    "hint": "반응형 및 시각적으로 매력적인 웹 사이트를 구축하는 데 간편한 프론트엔드 프레임워크입니다."
  },
  {
    "question": "React에서 'useState' 훅의 목적은 무엇인가요?",
    "options": ["함수형 컴포넌트에서 상태 관리", "재사용 가능한 커스텀 훅 생성", "API에서 데이터를 가져오기", "React 애플리케이션의 라우팅 관리"],
    "correctAnswer": "함수형 컴포넌트에서 상태 관리",
    "hint": "React 함수형 컴포넌트에 상태를 추가하는 데 사용됩니다."
  },
  {
    "question": "변경 사항을 추적하기 위해 널리 사용되는 코드의 변경 사항을 관리하기 위한 버전 관리 시스템은 무엇인가요?",
    "options": ["Subversion", "Mercurial", "Git", "Bazaar"],
    "correctAnswer": "Git",
    "hint": "빠른 처리 속도와 유연성으로 유명한 분산 버전 관리 시스템입니다."
  },
  [
    {
      "question": "JavaScript의 'strict mode'는 무엇을 의미하나요?",
      "options": ["보다 엄격한 문법 검사", "기능이 더 많은 모드", "낮은 수준의 프로그래밍 모드", "코드 실행 속도 향상"],
      "correctAnswer": "보다 엄격한 문법 검사",
      "hint": "보다 엄격한 문법 검사를 활성화하여 오류를 방지하고 코드 품질을 향상시킵니다."
    },
    {
      "question": "CSS에서 선택자를 사용하여 여러 요소를 동시에 선택하려면 어떻게 해야 하나요?",
      "options": ["쉼표로 구분하여 나열", "꺾쇠 기호로 감싸기", "더하기 기호로 연결", "큰따옴표로 묶기"],
      "correctAnswer": "쉼표로 구분하여 나열",
      "hint": "여러 요소를 동시에 선택할 때는 쉼표로 각 선택자를 구분합니다."
    },
    {
      "question": "React에서 조건부 렌더링을 위해 어떤 구문을 사용해야 하나요?",
      "options": ["if문", "for문", "switch문", "삼항 연산자"],
      "correctAnswer": "삼항 연산자",
      "hint": "삼항 연산자를 사용하여 조건에 따라 다른 컴포넌트 또는 요소를 렌더링합니다."
    },
    {
      "question": "다음 중 'let'과 'const'의 차이점은 무엇인가요?",
      "options": ["값을 변경할 수 있는지 여부", "초기화 여부", "변수의 유효 범위", "데이터 형식"],
      "correctAnswer": "값을 변경할 수 있는지 여부",
      "hint": "'let'으로 선언된 변수는 값을 변경할 수 있지만, 'const'로 선언된 변수는 값을 변경할 수 없습니다."
    },
    {
      "question": "JavaScript의 'spread 연산자'는 무엇을 의미하나요?",
      "options": ["객체를 복사하는 연산자", "배열을 병합하는 연산자", "객체를 병합하는 연산자", "배열을 복사하는 연산자"],
      "correctAnswer": "배열을 병합하는 연산자",
      "hint": "배열을 병합하여 새로운 배열을 생성하는 데 사용되는 연산자입니다."
    },
    {
      "question": "React에서 컴포넌트 간 상태를 전달하기 위해 어떤 패턴을 사용해야 하나요?",
      "options": ["상태 드리븐 프로그래밍", "가상 DOM 패턴", "제어되는 컴포넌트 패턴", "상태 끌어올리기 패턴"],
      "correctAnswer": "상태 끌어올리기 패턴",
      "hint": "하위 컴포넌트에서 상위 컴포넌트로 상태를 전달하여 상태를 공유하는 패턴입니다."
    },
    {
      "question": "JavaScript에서 문자열과 숫자를 함께 사용할 때 어떤 형식을 사용해야 하나요?",
      "options": ["문자열 보간", "문자열 파싱", "문자열 매핑", "문자열 연결"],
      "correctAnswer": "문자열 연결",
      "hint": "문자열과 숫자를 연결하여 하나의 문자열로 만드는 데 사용됩니다."
    },
    {
      "question": "다음 중 JavaScript에서 변수의 유효 범위를 나타내는 용어는 무엇인가요?",
      "options": ["Scope", "Context", "Area", "Zone"],
      "correctAnswer": "Scope",
      "hint": "변수가 어디서 사용될 수 있는지를 나타내는 범위를 의미합니다."
    },
    {
      "question": "JavaScript의 'arrow function'은 무엇을 의미하나요?",
      "options": ["콜백 함수", "순수 함수", "화살표 함수", "중첩 함수"],
      "correctAnswer": "화살표 함수",
      "hint": "함수를 간결하게 표현하는 화살표 기호를 사용한 함수입니다."
    },
    {
      "question": "다음 중 JavaScript에서 'falsy' 값으로 간주되는 것은 무엇인가요?",
      "options": ["0", "null", "false", "모두 해당하지 않음"],
      "correctAnswer": "모두 해당하지 않음",
      "hint": "'falsy' 값은 false로 간주되는 값으로 0, null, false, undefined, 빈 문자열 등이 포함됩니다."
    },
    {
      "question": "React에서 컴포넌트를 스타일링하기 위해 일반적으로 사용되는 언어는 무엇인가요?",
      "options": ["JavaScript", "HTML", "CSS", "Java"],
      "correctAnswer": "CSS",
      "hint": "컴포넌트의 스타일을 정의하기 위해 CSS를 일반적으로 사용합니다."
    },
    {
      "question": "JavaScript의 'map()' 메서드는 무엇을 수행하나요?",
      "options": ["배열을 필터링", "배열의 요소를 변경", "배열을 정렬", "배열의 요소를 변환"],
      "correctAnswer": "배열의 요소를 변환",
      "hint": "배열의 각 요소를 변환하여 새로운 배열을 생성하는 메서드입니다."
    },
    {
      "question": "다음 중 React에서 상태를 초기화하는 메서드는 무엇인가요?",
      "options": ["getInitialState()", "setState()", "initializeState()", "createState()"],
      "correctAnswer": "getInitialState()",
      "hint": "React 클래스 기반 컴포넌트에서 상태를 초기화하기 위해 사용되는 메서드입니다."
    },
    {
      "question": "다음 중 JavaScript에서 두 값의 동등성을 비교하는 데 사용되는 연산자는 무엇인가요?",
      "options": ["==", "===", "!=", "!=="],
      "correctAnswer": "===",
      "hint": "일치 연산자로, 값과 데이터 형식을 비교하여 동등성을 확인합니다."
    },
    {
      "question": "React에서 컴포넌트가 더 이상 필요하지 않을 때 메모리 누수를 방지하기 위해 사용되는 메서드는 무엇인가요?",
      "options": ["destroy()", "remove()", "unmount()", "componentWillUnmount()"],
      "correctAnswer": "componentWillUnmount()",
      "hint": "React 컴포넌트가 더 이상 필요하지 않을 때 정리 작업을 수행하기 위해 호출되는 메서드입니다."
    },
    {
      "question": "다음 중 JavaScript에서 객체를 생성하기 위해 사용되는 문법은 무엇인가요?",
      "options": ["{ }", "[ ]", "< >", "( )"],
      "correctAnswer": "{ }",
      "hint": "중괄호 { }를 사용하여 객체를 생성합니다."
    },
    {
      "question": "JavaScript의 'Promise'는 무엇을 의미하나요?",
      "options": ["함수의 재귀 호출", "비동기 작업의 결과를 나타내는 객체", "콜백 함수의 또 다른 이름", "실행 중인 함수"],
      "correctAnswer": "비동기 작업의 결과를 나타내는 객체",
      "hint": "비동기 작업이 완료되었거나 실패했음을 나타내는 객체입니다."
    },
    {
      "question": "React에서 컴포넌트의 초기 상태를 설정하기 위해 사용되는 메서드는 무엇인가요?",
      "options": ["componentWillMount()", "getInitialState()", "componentDidMount()", "constructor()"],
      "correctAnswer": "constructor()",
      "hint": "React 클래스 기반 컴포넌트에서 컴포넌트의 초기 상태를 설정하기 위해 사용되는 메서드입니다."
    },
    {
      "question": "다음 중 React에서 컴포넌트를 생성하기 위해 사용되는 메서드는 무엇인가요?",
      "options": ["createComponent()", "renderComponent()", "makeComponent()", "buildComponent()"],
      "correctAnswer": "renderComponent()",
      "hint": "React 컴포넌트를 생성하고 렌더링하는 데 사용되는 메서드입니다."
    },
    {
      "question": "React에서 이벤트 핸들러를 등록하기 위해 사용되는 속성은 무엇인가요?",
      "options": ["onClick", "onEvent", "handleEvent", "eventHandler"],
      "correctAnswer": "onClick",
      "hint": "사용자의 클릭 이벤트를 처리하는 데 사용되는 속성입니다."
    },
    {
      "question": "다음 중 JavaScript에서 조건문을 사용하여 두 개의 서로 다른 코드 블록 중 하나를 실행하는 문법은 무엇인가요?",
      "options": ["if-else 문", "switch 문", "for 문", "while 문"],
      "correctAnswer": "if-else 문",
      "hint": "조건에 따라 두 개의 다른 코드 블록 중 하나를 실행하는 데 사용됩니다."
    },
    {
      "question": "JavaScript의 'spread 연산자'는 무엇을 의미하나요?",
      "options": ["객체를 복사하는 연산자", "배열을 병합하는 연산자", "객체를 병합하는 연산자", "배열을 복사하는 연산자"],
      "correctAnswer": "배열을 병합하는 연산자",
      "hint": "배열을 병합하여 새로운 배열을 생성하는 데 사용되는 연산자입니다."
    },
    {
      "question": "React에서 컴포넌트 간 상태를 전달하기 위해 어떤 패턴을 사용해야 하나요?",
      "options": ["상태 드리븐 프로그래밍", "가상 DOM 패턴", "제어되는 컴포넌트 패턴", "상태 끌어올리기 패턴"],
      "correctAnswer": "상태 끌어올리기 패턴",
      "hint": "하위 컴포넌트에서 상위 컴포넌트로 상태를 전달하여 상태를 공유하는 패턴입니다."
    },
    {
      "question": "JavaScript에서 문자열과 숫자를 함께 사용할 때 어떤 형식을 사용해야 하나요?",
      "options": ["문자열 보간", "문자열 파싱", "문자열 매핑", "문자열 연결"],
      "correctAnswer": "문자열 연결",
      "hint": "문자열과 숫자를 연결하여 하나의 문자열로 만드는 데 사용됩니다."
    },
    {
      "question": "다음 중 JavaScript에서 변수의 유효 범위를 나타내는 용어는 무엇인가요?",
      "options": ["Scope", "Context", "Area", "Zone"],
      "correctAnswer": "Scope",
      "hint": "변수가 어디서 사용될 수 있는지를 나타내는 범위를 의미합니다."
    },
    {
      "question": "JavaScript의 'arrow function'은 무엇을 의미하나요?",
      "options": ["콜백 함수", "순수 함수", "화살표 함수", "중첩 함수"],
      "correctAnswer": "화살표 함수",
      "hint": "함수를 간결하게 표현하는 화살표 기호를 사용한 함수입니다."
    },
    {
      "question": "다음 중 JavaScript에서 'falsy' 값으로 간주되는 것은 무엇인가요?",
      "options": ["0", "null", "false", "모두 해당하지 않음"],
      "correctAnswer": "모두 해당하지 않음",
      "hint": "'falsy' 값은 false로 간주되는 값으로 0, null, false, undefined, 빈 문자열 등이 포함됩니다."
    },
    {
      "question": "React에서 컴포넌트를 스타일링하기 위해 일반적으로 사용되는 언어는 무엇인가요?",
      "options": ["JavaScript", "HTML", "CSS", "Java"],
      "correctAnswer": "CSS",
      "hint": "컴포넌트의 스타일을 정의하기 위해 일반적으로 CSS를 사용합니다."
    },
    {
      "question": "JavaScript의 'map()' 메서드는 무엇을 수행하나요?",
      "options": ["배열을 필터링", "배열의 요소를 변경", "배열을 정렬", "배열의 요소를 변환"],
      "correctAnswer": "배열의 요소를 변환",
      "hint": "배열의 각 요소를 변환하여 새로운 배열을 생성하는 메서드입니다."
    },
    {
      "question": "다음 중 React에서 상태를 초기화하는 메서드는 무엇인가요?",
      "options": ["getInitialState()", "setState()", "initializeState()", "createState()"],
      "correctAnswer": "getInitialState()",
      "hint": "React 클래스 기반 컴포넌트에서 상태를 초기화하기 위해 사용되는 메서드입니다."
    },
    {
      "question": "다음 중 JavaScript에서 두 값의 동등성을 비교하는 데 사용되는 연산자는 무엇인가요?",
      "options": ["==", "===", "!=", "!=="],
      "correctAnswer": "===",
      "hint": "일치 연산자로, 값과 데이터 형식을 비교하여 동등성을 확인합니다."
    },
    {
      "question": "React에서 컴포넌트가 더 이상 필요하지 않을 때 메모리 누수를 방지하기 위해 사용되는 메서드는 무엇인가요?",
      "options": ["destroy()", "remove()", "unmount()", "componentWillUnmount()"],
      "correctAnswer": "componentWillUnmount()",
      "hint": "React 컴포넌트가 더 이상 필요하지 않을 때 정리 작업을 수행하기 위해 호출되는 메서드입니다."
    },
    {
      "question": "다음 중 JavaScript에서 객체를 생성하기 위해 사용되는 문법은 무엇인가요?",
      "options": ["{ }", "[ ]", "< >", "( )"],
      "correctAnswer": "{ }",
      "hint": "중괄호 { }를 사용하여 객체를 생성합니다."
    },
    {
      "question": "JavaScript의 'Promise'는 무엇을 의미하나요?",
      "options": ["함수의 재귀 호출", "비동기 작업의 결과를 나타내는 객체", "콜백 함수의 또 다른 이름", "실행 중인 함수"],
      "correctAnswer": "비동기 작업의 결과를 나타내는 객체",
      "hint": "비동기 작업이 완료되었거나 실패했음을 나타내는 객체입니다."
    },
    {
      "question": "React에서 컴포넌트의 초기 상태를 설정하기 위해 사용되는 메서드는 무엇인가요?",
      "options": ["componentWillMount()", "getInitialState()", "componentDidMount()", "constructor()"],
      "correctAnswer": "constructor()",
      "hint": "React 클래스 기반 컴포넌트에서 컴포넌트의 초기 상태를 설정하기 위해 사용되는 메서드입니다."
    },
    {
      "question": "다음 중 React에서 컴포넌트를 생성하기 위해 사용되는 메서드는 무엇인가요?",
      "options": ["createComponent()", "renderComponent()", "makeComponent()", "buildComponent()"],
      "correctAnswer": "renderComponent()",
      "hint": "React 컴포넌트를 생성하고 렌더링하는 데 사용되는 메서드입니다."
    },
    {
      "question": "React에서 이벤트 핸들러를 등록하기 위해 사용되는 속성은 무엇인가요?",
      "options": ["onClick", "onEvent", "handleEvent", "eventHandler"],
      "correctAnswer": "onClick",
      "hint": "사용자의 클릭 이벤트를 처리하는 데 사용되는 속성입니다."
    },
    {
      "question": "다음 중 JavaScript에서 조건문을 사용하여 두 개의 서로 다른 코드 블록 중 하나를 실행하는 문법은 무엇인가요?",
      "options": ["if-else 문", "switch 문", "for 문", "while 문"],
      "correctAnswer": "if-else 문",
      "hint": "조건에 따라 두 개의 다른 코드 블록 중 하나를 실행하는 데 사용됩니다."
    },
    {
      "question": "React에서 'props'는 무엇을 의미하나요?",
      "options": ["컴포넌트의 상태", "컴포넌트의 메서드", "컴포넌트 간 상태 공유를 위한 속성", "컴포넌트의 초기화 값"],
      "correctAnswer": "컴포넌트 간 상태 공유를 위한 속성",
      "hint": "하위 컴포넌트에서 상위 컴포넌트로 데이터를 전달하기 위해 사용되는 속성입니다."
    },
    {
      "question": "다음 중 JavaScript에서 배열을 필터링하는 데 사용되는 메서드는 무엇인가요?",
      "options": ["map()", "filter()", "reduce()", "forEach()"],
      "correctAnswer": "filter()",
      "hint": "조건을 만족하는 요소로만 구성된 새로운 배열을 반환하는 메서드입니다."
    },
    {
      "question": "React에서 컴포넌트의 상태를 변경하기 위해 사용되는 메서드는 무엇인가요?",
      "options": ["setState()", "updateState()", "changeState()", "modifyState()"],
      "correctAnswer": "setState()",
      "hint": "React 컴포넌트의 상태를 변경하고 다시 렌더링하기 위해 사용되는 메서드입니다."
    },
    {
      "question": "JavaScript의 'this' 키워드는 무엇을 의미하나요?",
      "options": ["함수 내에서 함수 자체를 참조하는 것", "현재 실행 중인 함수를 참조하는 것", "상위 스코프를 참조하는 것", "호출한 객체를 참조하는 것"],
      "correctAnswer": "호출한 객체를 참조하는 것",
      "hint": "함수가 호출될 때 해당 함수를 호출한 객체를 참조합니다."
    },
    {
      "question": "다음 중 React에서 조건부 렌더링을 위해 사용되는 문법은 무엇인가요?",
      "options": ["if-else 문", "for 문", "switch 문", "삼항 연산자"],
      "correctAnswer": "삼항 연산자",
      "hint": "조건에 따라 두 개의 다른 코드 블록 중 하나를 렌더링하는 데 사용됩니다."
    }
  ]
]
